{"version":3,"sources":["array.js","components/pages/Add.js","components/EmpCard/index.js","components/pages/Home.js","manipulations/Alpha.js","manipulations/ManagerF.js","manipulations/EngineerF.js","manipulations/InternF.js","components/SortBar/index.js","App.js","serviceWorker.js","index.js"],"names":["empArray","JSON","parse","localStorage","getItem","addEmp","res","emp","name","document","getElementById","value","title","email","push","console","log","setItem","stringify","alert","Add","props","Form","FormGroup","Label","for","Input","type","id","placeholder","Button","onClick","EmpCard","Card","className","CardBody","CardTitle","CardSubtitle","Home","empComponents","map","person","Alpha","sort","a","b","nameA","toLowerCase","nameB","ManagerF","filter","e","EngineerF","InternF","SortBar","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","to","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","style","NavbarText","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8472172d.chunk.js","sourcesContent":["const empArray = JSON.parse(localStorage.getItem(\"employees\"))\r\n\r\nexport default empArray;","import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\nimport empArray from '../../array';\r\n\r\nconst Add = (props) => {\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Label for=\"full-name\">Full Name</Label>\r\n        <Input type=\"text\" name=\"fullName\" id=\"fullName\" placeholder=\"Bjarne Stroustrup\" />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"title\">Select</Label>\r\n        <Input type=\"select\" name=\"title\" id=\"title\">\r\n          <option>Manager</option>\r\n          <option>Engineer</option>\r\n          <option>Intern</option>\r\n        </Input>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"email\">email</Label>\r\n        <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"codeg33k@gmail.com\" />\r\n      </FormGroup>\r\n      <Button onClick={addEmp}>Submit</Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\n\r\nfunction addEmp(res) {\r\n\r\n  let fullName = document.getElementById('fullName').value;\r\n  let title = document.getElementById('title').value;\r\n  let email = document.getElementById('email').value;\r\n\r\n  const emp = {\r\n    name: fullName,\r\n    title: title,\r\n    email: email\r\n  }\r\n  \r\n  empArray.push(emp);\r\n  console.log(empArray);\r\n  localStorage.setItem(\"employees\", JSON.stringify(empArray));\r\n  alert(\"Employee Added!\");\r\n}\r\n\r\nexport default Add;","import React from 'react';\r\nimport {\r\n  Card, CardImg, CardText, CardBody,\r\n  CardTitle, CardSubtitle, Button\r\n} from 'reactstrap';\r\nimport './style.css';\r\n\r\nconst EmpCard = (props) => {\r\n  return (\r\n    <div>\r\n      <Card className= \"wholeCard\">\r\n        <CardBody>\r\n          <CardTitle className=\"name\">{props.emp.name}</CardTitle>\r\n          <CardSubtitle className=\"title\">{props.emp.title}</CardSubtitle>\r\n          <CardSubtitle className=\"email\">{props.emp.email}</CardSubtitle>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmpCard;","import React from 'react';\r\nimport EmpCard from '../EmpCard';\r\n\r\nfunction Home() {\r\n    let empArray = JSON.parse(localStorage.getItem(\"employees\"));\r\n    const empComponents = empArray.map(person => <EmpCard emp={person}/>)\r\n    return(\r\n        <div>\r\n            {empComponents}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport EmpCard from '../components/EmpCard';\r\n\r\nfunction Alpha() {\r\n\r\n    let empArray = JSON.parse(localStorage.getItem(\"employees\"));\r\n    const alphaArray = empArray.sort(function(a, b){\r\n        var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase();\r\n        if (nameA < nameB) //sort string ascending\r\n         return -1;\r\n        if (nameA > nameB)\r\n         return 1;\r\n        return 0; //default return value (no sorting)\r\n       });\r\n       const empComponents = alphaArray.map(person => <EmpCard emp={person}/>)\r\n\r\n    return(\r\n        <div>\r\n            {empComponents}\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default Alpha;","import React from 'react';\r\nimport EmpCard from '../components/EmpCard';\r\n\r\nfunction ManagerF() {\r\n\r\n    let empArray = JSON.parse(localStorage.getItem(\"employees\"));\r\n    const manArray = empArray.filter(function(e) {\r\n        return e.title == 'Manager'\r\n    })\r\n       const empComponents = manArray.map(person => <EmpCard emp={person}/>)\r\n\r\n    return(\r\n        <div>\r\n            {empComponents}\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ManagerF;","import React from 'react';\r\nimport EmpCard from '../components/EmpCard';\r\n\r\nfunction EngineerF() {\r\n\r\n    let empArray = JSON.parse(localStorage.getItem(\"employees\"));\r\n    const manArray = empArray.filter(function(e) {\r\n        return e.title == 'Engineer'\r\n    })\r\n       const empComponents = manArray.map(person => <EmpCard emp={person}/>)\r\n\r\n    return(\r\n        <div>\r\n            {empComponents}\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default EngineerF;","import React from 'react';\r\nimport EmpCard from '../components/EmpCard';\r\n\r\nfunction InternF() {\r\n\r\n    let empArray = JSON.parse(localStorage.getItem(\"employees\"));\r\n    const manArray = empArray.filter(function(e) {\r\n        return e.title == 'Intern'\r\n    })\r\n       const empComponents = manArray.map(person => <EmpCard emp={person}/>)\r\n\r\n    return(\r\n        <div>\r\n            {empComponents}\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default InternF;","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText\r\n} from 'reactstrap';\r\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom';\r\nimport Add from '../pages/Add';\r\nimport Home from '../pages/Home';\r\nimport Alpha from '../../manipulations/Alpha';\r\nimport ManagerF from '../../manipulations/ManagerF';\r\nimport EngineerF from '../../manipulations/EngineerF';\r\nimport InternF from '../../manipulations/InternF';\r\n\r\n\r\nconst SortBar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <HashRouter>\r\n          <Navbar color=\"dark\" dark expand=\"md\">\r\n            <NavbarBrand href=\"/\">Employee Directory</NavbarBrand>\r\n            <NavbarToggler onClick={toggle} />\r\n            <Collapse isOpen={isOpen} navbar>\r\n              <Nav className=\"mr-auto\" navbar>\r\n                <NavItem>\r\n                  <NavLink className='navLinks'><Link to={'/add'} className='nav-link'>Add</Link></NavLink>\r\n                </NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                  <DropdownToggle nav caret>\r\n                    Sorting\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem>\r\n                      <NavLink className='navLinks'><Link to={'/alpha'} className='nav-link' style={{color: 'black'}}>Alphabetical</Link></NavLink>\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      By ID\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                  <DropdownToggle nav caret>\r\n                    Filtering\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem>\r\n                      <NavLink className='navLinks'><Link to={'/managerf'} className='nav-link' style={{color: 'black'}}>Managers</Link></NavLink>\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      <NavLink className='navLinks'><Link to={'/engineerf'} className='nav-link' style={{color: 'black'}}>Engineers</Link></NavLink>\r\n                    </DropdownItem>\r\n                    <DropdownItem>\r\n                      <NavLink className='navLinks'><Link to={'/internf'} className='nav-link' style={{color: 'black'}}>Interns</Link></NavLink>\r\n                    </DropdownItem>\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </Nav>\r\n              <NavbarText>Philip Lemaster</NavbarText>\r\n            </Collapse>\r\n          </Navbar>\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/add\">\r\n                    <Add />\r\n                </Route>\r\n                <Route path=\"/alpha\">\r\n                    <Alpha />\r\n                </Route>\r\n                <Route path=\"/managerf\">\r\n                    <ManagerF />\r\n                </Route>\r\n                <Route path=\"/engineerf\">\r\n                    <EngineerF />\r\n                </Route>\r\n                <Route path=\"/internf\">\r\n                    <InternF />\r\n                </Route>\r\n            </Switch>\r\n            \r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortBar;","import React from 'react';\nimport SortBar from './components/SortBar';\nimport EmpCard from './components/EmpCard';\nimport { HashRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <SortBar />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}